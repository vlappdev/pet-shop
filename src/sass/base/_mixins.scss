// --------------------------------------------------
// Flexbox SASS mixins
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($fg: 0, $fs: 1, $fb: auto) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 0);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flexbox: $fg $fs $fb;
    flex: $fg $fs $fb;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-orient:horizontal;
        -webkit-box-direction:reverse;

    } @else if $value == column {
        -webkit-box-orient:vertical;
        -webkit-box-direction:normal;

    } @else if $value == column-reverse {
        -webkit-box-orient:vertical;
        -webkit-box-direction:reverse;

    } @else {
        -webkit-box-orient:horizontal;
        -webkit-box-direction:normal;
    }

    -webkit-flex-direction:$value;
    -ms-flex-direction:$value;
    flex-direction:$value;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow: 1) {
    -webkit-box-flex: $grow;
    -webkit-flex-grow: $grow;
    -ms-flex-positive: $grow;
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink: 0) {
    -webkit-flex-shrink: $shrink;
    -ms-flex-negative: $shrink;
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
    -webkit-flex-basis: $width;
    -ms-flex-preferred-size: $width;
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($value: stretch) {
    -webkit-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    align-items: $value;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($value: auto) {
    -webkit-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

/**************************************** BREAAKPOINT ****************************************/
/*chose breakpoint and put in mixin*/
/*@include breakpoint(xs); for mobile device*/


@if variable-exists(l_custom) {
    $l      : $l_custom;
}
@if variable-exists(m_custom) {
    $m      : $m_custom;
}
@if variable-exists(s_custom) {
    $s      : $s_custom;
}
@if variable-exists(xs_custom) {
    $xs     : $xs_custom;
}

@mixin breakpoint($point) {
    //breakpoint for large device
    @if $point == l {
        @media (max-width: $l) {
            @content;
        }
    }
    @else if $point == big {
        @media (max-width: $l) {
            @content;
        }
    }
        //breakpoint for medium device
    @else if $point == m {
        @media (max-width: $m) {
            @content;
        }
    }
    @else if $point == medium {
        @media (max-width: $m) {
            @content;
        }
    }
        //breakpoint for small device
    @else if $point == s {
        @media (max-width: $s) {
            @content;
        }
    }
    @else if $point == small {
        @media (max-width: $s) {
            @content;
        }
    }
        //breakpoint for extra-small device
    @else if $point == xs {
        @media (max-width: $xs) {
            @content;
        }
    }
        //breakpoint for greater than extra-small device
    @else if $point == greaterthanxs {
        @media (min-width: $xs) {
            @content;
        }
    }
        //breakpoint for greater than small device
    @else if $point == greaterthans {
        @media (min-width: $s) {
            @content;
        }
    }
    @else if $point == greaterthansmall {
        @media (min-width: $s) {
            @content;
        }
    }
        //breakpoint for greater than small device
    @else if $point == greaterthanm {
        @media (min-width: $m) {
            @content;
        }
    }
    @else if $point == greaterthanmedium {
        @media (min-width: $m) {
            @content;
        }
    }
        //breakpoint for greater than small device
    @else if $point == greaterthanl {
        @media (min-width: $l) {
            @content;
        }
    }
        //breakpoint between extra-small and medium
    @else if $point == betweenxss {
        @media (min-width: $xs) and (max-width: $s) {
            @content;
        }
    }
        //breakpoint between exstra-small and medium
    @else if $point == betweenxsm {
        @media (min-width: $xs) and (max-width: $m) {
            @content;
        }
    }
        //breakpoint between small and medium
    @else if $point == betweensm {
        @media (min-width: $s) and (max-width: $m) {
            @content;
        }
    }
    @else if $point == betweenmediumsmall {
        @media (min-width: $s) and (max-width: $m) {
            @content;
        }
    }
        //breakpoint between medium and large
    @else if $point == betweenml {
        @media (min-width: $m) and (max-width: $l) {
            @content;
        }
    }
}